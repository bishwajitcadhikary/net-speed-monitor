name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
        default: '1.0.0'

jobs:
  build:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2.0'
        
    - name: Install XcodeGen
      run: |
        brew install xcodegen
        
    - name: Generate Xcode project
      run: |
        xcodegen generate
        
    - name: Build application
      run: |
        xcodebuild -project NetSpeedMonitor.xcodeproj \
          -scheme NetSpeedMonitor \
          -configuration Release \
          -destination 'platform=macOS' \
          -archivePath NetSpeedMonitor.xcarchive \
          archive \
          CODE_SIGN_STYLE=Manual \
          CODE_SIGN_IDENTITY="" \
          DEVELOPMENT_TEAM=""
          
    - name: Create DMG
      run: |
        # Install create-dmg
        brew install create-dmg
        
        # Create app bundle directory
        mkdir -p NetSpeedMonitor.app
        
        # Copy the built app
        echo "Copying app from archive..."
        cp -R NetSpeedMonitor.xcarchive/Products/Applications/NetSpeedMonitor.app NetSpeedMonitor.app/
        
        # Verify the app was copied
        if [ ! -d "NetSpeedMonitor.app/Contents" ]; then
          echo "‚ùå Failed to copy app from archive"
          ls -la NetSpeedMonitor.xcarchive/Products/Applications/
          exit 1
        fi
        
        echo "‚úÖ App copied successfully"
        
        # Create DMG
        echo "Creating DMG..."
        create-dmg \
          --volname "Net Speed Monitor" \
          --window-pos 200 120 \
          --window-size 600 300 \
          --icon-size 100 \
          --icon "NetSpeedMonitor.app" 175 120 \
          --hide-extension "NetSpeedMonitor.app" \
          --app-drop-link 425 120 \
          "NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}.dmg" \
          "NetSpeedMonitor.app"
        
        # Verify DMG was created
        if [ ! -f "NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}.dmg" ]; then
          echo "‚ùå Failed to create DMG"
          exit 1
        fi
        
        echo "‚úÖ DMG created successfully: NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}.dmg"
        ls -la NetSpeedMonitor-*.dmg
          
    - name: List files for debugging
      run: |
        echo "Current directory: $(pwd)"
        echo "Files in current directory:"
        ls -la
        echo "DMG file check:"
        ls -la NetSpeedMonitor-*.dmg || echo "No DMG file found"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}
        path: |
          NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}.dmg
        retention-days: 30
        
    - name: Check if release exists
      id: check_release
      run: |
        # Check if release exists using GitHub API
        RELEASE_EXISTS=$(gh api repos/${{ github.repository }}/releases/tags/${{ github.ref_name }} --jq '.id' 2>/dev/null || echo "not_found")
        if [ "$RELEASE_EXISTS" != "not_found" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "Release already exists with ID: $RELEASE_EXISTS"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Release does not exist, will create new one"
        fi
        
    - name: Create Release
      if: steps.check_release.outputs.exists == 'false'
      run: |
        echo "Creating new release for tag: ${{ github.ref_name }}"
        
        # Create release using GitHub CLI
        gh release create ${{ github.ref_name }} \
          --title "Net Speed Monitor ${{ github.event.inputs.version || github.ref_name }}" \
          --prerelease \
          --notes "## Net Speed Monitor ${{ github.event.inputs.version || github.ref_name }}
          
          ### ‚ö†Ô∏è Pre-release for Testing
          
          This is a pre-release version for testing purposes. The app is **not code-signed** and **not notarized** by Apple.
          
          ### üîß Installation
          
          1. Download the DMG file
          2. Open the DMG and drag Net Speed Monitor to Applications
          3. **Important**: Right-click the app ‚Üí \"Open\" ‚Üí \"Open\" to bypass Gatekeeper
          4. The app will work normally after the first launch
          
          ### üìù Notes
          
          - This build is for testing and development purposes
          - No code signing or Apple notarization applied
          - Users may see security warnings on first launch
          - This is normal for unsigned apps
          
          ### üöÄ Features
          
          - Real-time network speed monitoring
          - Menu bar integration
          - Individual notification settings
          - Customizable preferences
          
          ### üêõ Reporting Issues
          
          If you encounter any issues, please report them on GitHub:
          https://github.com/bishwajitcadhikary/net-speed-monitor/issues"
        
        # Upload the DMG file
        echo "Uploading DMG to release..."
        gh release upload ${{ github.ref_name }} NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}.dmg --repo ${{ github.repository }}
        
        echo "‚úÖ Release created and DMG uploaded successfully"
        
    - name: Upload to existing release
      if: steps.check_release.outputs.exists == 'true'
      run: |
        echo "Uploading to existing release..."
        gh release upload ${{ github.ref_name }} NetSpeedMonitor-${{ github.event.inputs.version || github.ref_name }}.dmg --repo ${{ github.repository }} --clobber
        echo "‚úÖ DMG uploaded to existing release successfully"
